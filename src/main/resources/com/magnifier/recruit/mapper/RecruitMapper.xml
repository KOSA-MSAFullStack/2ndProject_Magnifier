<?xml version="1.0" encoding="UTF-8" ?>
<!-- RecruitMapper.xml -->
<!-- 채용 공고(Recruit) 관련 SQL 쿼리 정의 -->
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- * author: 김기성 -->
<mapper namespace="com.magnifier.recruit.mapper.RecruitMapper">

    <!-- 
        RecruitResultMap: DB 결과(ResultSet) RecruitDto 객체에 매핑
        - DB 컬럼(snake_case)과 DTO 필드(camelCase) 이름이 다를 경우 사용
    -->
    <resultMap id="RecruitResultMap" type="com.magnifier.recruit.dto.RecruitDto">
        <id property="recruitId" column="RECRUIT_ID" />
        <result property="title" column="TITLE" />
        <result property="content" column="CONTENT" />
        <result property="careerCondition" column="CAREER_CONDITION" />
        <result property="education" column="EDUCATION" />
        <result property="employmentType" column="EMPLOYMENT_TYPE" />
        <result property="headCount" column="HEADCOUNT" />
        <result property="workingArea" column="WORKING_AREA" />
        <result property="salaryCondition" column="SALARY_CONDITION" />
        <result property="workingHours" column="WORKING_HOURS" />
        <result property="workingType" column="WORKING_TYPE" />
        <result property="insurance" column="INSURANCE" />
        <result property="retirementSalary" column="RETIREMENT_SALARY" />
        <result property="deadLine" column="DEADLINE" jdbcType="DATE"/>
        <result property="step" column="STEP" />
        <result property="contact" column="CONTACT" />
        <result property="enterpriseId" column="ENTERPRISE_ID" />
        <result property="enterpriseName" column="ENTERPRISE_NAME" />
    </resultMap>

    <!-- 재사용 가능한 컬럼 목록 정의 -->
    <sql id="recruitColumns">
        RECRUIT_ID, TITLE, CONTENT, CAREER_CONDITION, EDUCATION, EMPLOYMENT_TYPE,
        HEADCOUNT, WORKING_AREA, SALARY_CONDITION, WORKING_HOURS,
        WORKING_TYPE, INSURANCE, RETIREMENT_SALARY, DEADLINE, STEP,
        CONTACT, ENTERPRISE_ID
    </sql>

    <!-- 채용 공고 등록 -->
    <insert id="insertRecruit" parameterType="com.magnifier.recruit.dto.RecruitDto">
        <selectKey keyProperty="recruitId" resultType="int" order="BEFORE">
            SELECT RECRUIT_SEQ.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO RECRUIT (
            RECRUIT_ID, TITLE, CONTENT, CAREER_CONDITION, EDUCATION, EMPLOYMENT_TYPE,
            HEADCOUNT, WORKING_AREA, SALARY_CONDITION, WORKING_HOURS,
            WORKING_TYPE, INSURANCE, RETIREMENT_SALARY, DEADLINE, STEP,
            CONTACT, ENTERPRISE_ID
        ) VALUES (
            #{recruitId}, #{title}, #{content}, #{careerCondition}, #{education}, #{employmentType},
            #{headCount}, #{workingArea}, #{salaryCondition}, #{workingHours},
            #{workingType}, #{insurance}, #{retirementSalary}, #{deadLine},
            #{step}, #{contact}, #{enterpriseId}
        )
    </insert>

    <!-- 전체 채용공고 목록 조회 (페이지네이션 적용) -->
    <select id="getRecruitList" parameterType="map" resultMap="RecruitResultMap">
        SELECT *
        FROM (
            SELECT r.RECRUIT_ID,
                r.TITLE,
                r.CONTENT,
                r.CAREER_CONDITION,
                r.EDUCATION,
                r.EMPLOYMENT_TYPE,
                r.HEADCOUNT,
                r.WORKING_AREA,
                r.SALARY_CONDITION,
                r.WORKING_HOURS,
                r.WORKING_TYPE,
                r.INSURANCE,
                r.RETIREMENT_SALARY,
                r.DEADLINE,
                r.STEP,
                r.CONTACT,
                r.ENTERPRISE_ID,
                e.NAME AS ENTERPRISE_NAME,
                ROW_NUMBER() OVER (ORDER BY r.RECRUIT_ID DESC) AS rnum
            FROM RECRUIT r
            JOIN ENTERPRISE e 
            ON r.ENTERPRISE_ID = e.ENTERPRISE_ID
        ) t
        WHERE t.rnum BETWEEN #{startRow} AND #{endRow}
    </select>
    <!-- 전체 채용공고 수 조회 -->
    <select id="getCount" resultType="int">
        SELECT count(*) FROM RECRUIT
    </select>

    <!-- 기업별 등록한 채용공고 목록 조회 -->
    <select id="getRecruitListById" parameterType="int" resultMap="RecruitResultMap">
        SELECT 
            <include refid="recruitColumns" />
        FROM RECRUIT 
        WHERE ENTERPRISE_ID = #{enterpriseId}
        ORDER BY RECRUIT_ID DESC
    </select>

    <!-- 채용 공고 상세 조회 -->
    <select id="detailRecruit" parameterType="int" resultMap="RecruitResultMap">
        SELECT 
            <include refid="recruitColumns" />
        FROM RECRUIT
        WHERE RECRUIT_ID = #{recruitId}
    </select>

    <!-- 채용 공고 수정 -->
    <update id="updateRecruit" parameterType="com.magnifier.recruit.dto.RecruitDto">
        UPDATE RECRUIT
           SET TITLE = #{title}, 
               CONTENT = #{content}, 
               CAREER_CONDITION = #{careerCondition}, 
               EDUCATION = #{education}, 
               EMPLOYMENT_TYPE = #{employmentType},
               HEADCOUNT = #{headCount}, 
               WORKING_AREA = #{workingArea}, 
               SALARY_CONDITION = #{salaryCondition}, 
               WORKING_HOURS = #{workingHours},
               WORKING_TYPE = #{workingType}, 
               INSURANCE = #{insurance}, 
               RETIREMENT_SALARY = #{retirementSalary}, 
               DEADLINE = #{deadLine}, 
               STEP = #{step},
               CONTACT = #{contact}
         WHERE RECRUIT_ID = #{recruitId}
           AND ENTERPRISE_ID = #{enterpriseId}
    </update>

    <!-- 채용 공고 삭제 -->
    <delete id="deleteRecruit" parameterType="com.magnifier.recruit.dto.RecruitDto">
        DELETE FROM RECRUIT
         WHERE RECRUIT_ID = #{recruitId}
           AND ENTERPRISE_ID = #{enterpriseId}
    </delete>
    <!-- 채용 공고 일괄 삭제 -->
    <delete id="deleteRecruitsById" parameterType="java.util.List">
        DELETE FROM RECRUIT
        WHERE RECRUIT_ID IN
        <foreach item="recruitId" collection="recruitIds" open="(" separator="," close=")">
            #{recruitId}
        </foreach>
    </delete>
</mapper>
